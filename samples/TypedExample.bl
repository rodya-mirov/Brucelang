// NB: this assumes you load a previous library that defines `derp: Integer` somewhere in it

do !(true);

// returns 12x
let zombie = x:Integer => {
    let helper: Fn(Integer) -> Integer = a: Integer => x*a;
    return helper(12);
};

// returns 12arg
define f(arg: Integer): Integer as {
    let helpful: Integer = (x: Integer => x*arg)(12); // returns 12arg
    let moreHelpful: Integer = ((a: Integer, b: Integer) => (a/b)-arg)(34, 55); // returns -arg
    return helpful;
}

// returns food+12
let chomp = food: Integer =>
    (a: Integer => {
        let x: Integer = 12;
        return a + x;
    })(food);

// note we don't have to have any type here, except for function arguments ...
let curry<T> = func: Fn(T, Integer, Integer, Integer) -> T => (x: T => func(x, 2, 3, 4));

// ... but the "define" syntax requires a return type, just for sake of syntax
// this always returns 98
define g(zed: Integer): Integer as {
    define h(a: Integer, b: Integer, c: Integer, d: Integer): Integer as {
        return a + b + f(c + d);
    }

    // type inference here, you might actually be happier declaring the type
    let curryPowder = curry<Integer>(h); // a => a+2+12*(3+4) which is a => a+86

    if (1 < 3) {
        return curryPowder(f(1)); // curryPowder(12) which is 98
    } else if (2 < 3) {
        do 15+17;
        return (() => 12)();
    } else {
        return 1413;
    }
}

define main(): Integer as {
    let x: Integer = 13 + 14; // 27
    let y = 13 * (x - f(12)); // 13*(27-12*12) which is -1521

    return x - g(y) * chomp(18); // 27 - 98 * (18+12) which is -2913
}

//-2913 - derp, which (assuming SimpleInclude) is -2913-121 == -3034
do main() - derp;
